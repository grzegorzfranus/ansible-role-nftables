---
# =============================================================================
# Ansible Role: NFTables - Prerequisites Tasks
# =============================================================================
# This file handles all prerequisite checks and configurations required by
# NFTables before installation. It ensures the system environment is properly
# prepared by:
#
# Flow:
# 1. Setting up rsyslog for logging
# 2. Disabling conflicting firewall services
#
# The tasks automatically determine if a system reboot is needed based on
# changes made to critical services.
# =============================================================================

# -----------------------------------------------------------------------------
# 1. Rsyslog Setup
# -----------------------------------------------------------------------------
- name: NFTables | prerequisites | Install rsyslog package
  become: true
  ansible.builtin.package:
    name: rsyslog
    state: present
  register: _nftables_rsyslog_package_

- name: NFTables | prerequisites | Ensure service is enabled
  become: true
  ansible.builtin.service:
    name: rsyslog
    enabled: true
  register: _nftables_rsyslog_status_

- name: NFTables | prerequisites | Check if system requires reboot
  ansible.builtin.set_fact:
    nftables_reboot_required: true
  when: >
    _nftables_rsyslog_package_.changed | default(false) or
    _nftables_rsyslog_status_.changed | default(false)

# -----------------------------------------------------------------------------
# 2. Conflicting Firewall Services
# -----------------------------------------------------------------------------
- name: NFTables | prerequisites | Gather service facts
  become: true
  ansible.builtin.service_facts:

- name: NFTables | prerequisites | Stop firewalld service
  become: true
  ansible.builtin.service:
    name: firewalld
    state: stopped
  retries: 3
  delay: 5
  when: >
    ansible_facts.services['firewalld.service'] is defined and
    ansible_facts.services['firewalld.service'].state == 'running'

- name: NFTables | prerequisites | Disable firewalld service
  become: true
  ansible.builtin.service:
    name: firewalld
    enabled: false
  retries: 3
  delay: 5
  when: >
    ansible_facts.services['firewalld.service'] is defined and
    ansible_facts.services['firewalld.service'].status == 'enabled'

- name: NFTables | prerequisites | Stop iptables service
  become: true
  ansible.builtin.service:
    name: iptables
    state: stopped
  retries: 3
  delay: 5
  when: >
    ansible_facts.services['iptables.service'] is defined and
    ansible_facts.services['iptables.service'].state == 'running'

- name: NFTables | prerequisites | Disable iptables service
  become: true
  ansible.builtin.service:
    name: iptables
    enabled: false
  retries: 3
  delay: 5
  when: >
    ansible_facts.services['iptables.service'] is defined and
    ansible_facts.services['iptables.service'].status == 'enabled'

- name: NFTables | prerequisites | Stop netfilter-persistent service
  become: true
  ansible.builtin.service:
    name: netfilter-persistent
    state: stopped
  retries: 3
  delay: 5
  when: >
    ansible_facts.services['netfilter-persistent.service'] is defined and
    ansible_facts.services['netfilter-persistent.service'].state == 'running'

- name: NFTables | prerequisites | Disable netfilter-persistent service
  become: true
  ansible.builtin.service:
    name: netfilter-persistent
    enabled: false
  retries: 3
  delay: 5
  when: >
    ansible_facts.services['netfilter-persistent.service'] is defined and
    ansible_facts.services['netfilter-persistent.service'].status == 'enabled'

- name: NFTables | prerequisites | Stop ufw service
  become: true
  ansible.builtin.service:
    name: ufw
    state: stopped
  retries: 3
  delay: 5
  when: >
    ansible_facts.services['ufw.service'] is defined and
    ansible_facts.services['ufw.service'].state == 'running'

- name: NFTables | prerequisites | Disable ufw service
  become: true
  ansible.builtin.service:
    name: ufw
    enabled: false
  retries: 3
  delay: 5
  when: >
    ansible_facts.services['ufw.service'] is defined and
    ansible_facts.services['ufw.service'].status == 'enabled'
