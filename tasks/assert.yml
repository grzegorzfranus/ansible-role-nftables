---
# =============================================================================
# Ansible Role: NFTables - Assertions
# =============================================================================
# This file contains assertions to validate all role variables before execution.
# These checks ensure that the provided variable values are of the correct type
# and within valid ranges/options, preventing runtime errors.
#
# Flow:
# 1. General Settings
# 2. Logging Configuration
# 3. Base Filter Chain Policies
# 4. ICMP/Ping Settings
# 5. Basic Access Control Settings
# 6. Cluster Communication Settings
# =============================================================================

# -----------------------------------------------------------------------------
# 1. General Settings
# -----------------------------------------------------------------------------
- name: NFTables | assert | Validate role action parameter
  assert:
    that:
      - nftables_role_action is defined
      - nftables_role_action is string
      - nftables_role_action in [ "all", "requirements", "install", "configure", "rules", "acl", "logrotate", "upgrade" ]
    quiet: true
    fail_msg: "nftables_role_action must be one of: all, requirements, install, configure, rules, acl, logrotate, upgrade"

- name: NFTables | assert | Validate service enabled parameter
  assert:
    that:
      - nftables_service_enabled is defined
      - nftables_service_enabled is boolean
    quiet: true
    fail_msg: "nftables_service_enabled must be a boolean (true/false)"

- name: NFTables | assert | Validate logrotate configuration flag
  assert:
    that:
      - nftables_configure_logrotate is defined
      - nftables_configure_logrotate is boolean
    quiet: true
    fail_msg: "nftables_configure_logrotate must be a boolean (true/false)"

- name: NFTables | assert | Validate security rules configuration flag
  assert:
    that:
      - nftables_configure_security_rules is defined
      - nftables_configure_security_rules is boolean
    quiet: true
    fail_msg: "nftables_configure_security_rules must be a boolean (true/false)"

# -----------------------------------------------------------------------------
# 2. Logging Configuration
# -----------------------------------------------------------------------------
- name: NFTables | assert | Validate logrotate options
  assert:
    that:
      - nftables_logrotate_options is defined
      - nftables_logrotate_options is mapping
      - nftables_logrotate_options.archive_directory_path is defined
      - nftables_logrotate_options.archive_directory_path is string
      - nftables_logrotate_options.frequency is defined
      - nftables_logrotate_options.frequency in ["hourly", "daily", "weekly", "monthly"]
      - nftables_logrotate_options.count is defined
      - nftables_logrotate_options.count is integer
      - nftables_logrotate_options.missingok is defined
      - nftables_logrotate_options.missingok is boolean
      - nftables_logrotate_options.compress is defined
      - nftables_logrotate_options.compress is boolean
      - nftables_logrotate_options.nocreate is defined
      - nftables_logrotate_options.nocreate is boolean
      - nftables_logrotate_options.dateext is defined
      - nftables_logrotate_options.dateext is boolean
    quiet: true
    fail_msg: "nftables_logrotate_options is missing required fields or contains invalid values"

# -----------------------------------------------------------------------------
# 3. Base Filter Chain Policies
# -----------------------------------------------------------------------------
- name: NFTables | assert | Validate input chain default policy
  assert:
    that:
      - nftables_input_default_policy is defined
      - nftables_input_default_policy is string
      - nftables_input_default_policy in ["accept", "drop", "reject"]
    quiet: true
    fail_msg: "nftables_input_default_policy must be one of: accept, drop, reject"

- name: NFTables | assert | Validate forward chain default policy
  assert:
    that:
      - nftables_forward_default_policy is defined
      - nftables_forward_default_policy is string
      - nftables_forward_default_policy in ["accept", "drop", "reject"]
    quiet: true
    fail_msg: "nftables_forward_default_policy must be one of: accept, drop, reject"

- name: NFTables | assert | Validate output chain default policy
  assert:
    that:
      - nftables_output_default_policy is defined
      - nftables_output_default_policy is string
      - nftables_output_default_policy in ["accept", "drop", "reject"]
    quiet: true
    fail_msg: "nftables_output_default_policy must be one of: accept, drop, reject"

- name: NFTables | assert | Validate logging options for dropped packets
  assert:
    that:
      - nftables_log_input_dropped is defined
      - nftables_log_input_dropped is boolean
      - nftables_log_forward_dropped is defined
      - nftables_log_forward_dropped is boolean
      - nftables_log_output_dropped is defined
      - nftables_log_output_dropped is boolean
      - nftables_log_input_dropped_rate_limit is defined
      - nftables_log_input_dropped_rate_limit is string
      - nftables_log_input_dropped_burst is defined
      - nftables_log_input_dropped_burst is integer
      - nftables_log_forward_dropped_rate_limit is defined
      - nftables_log_forward_dropped_rate_limit is string
      - nftables_log_forward_dropped_burst is defined
      - nftables_log_forward_dropped_burst is integer
      - nftables_log_output_dropped_rate_limit is defined
      - nftables_log_output_dropped_rate_limit is string
      - nftables_log_output_dropped_burst is defined
      - nftables_log_output_dropped_burst is integer
    quiet: true
    fail_msg: "Logging options for dropped packets contain invalid values"

# -----------------------------------------------------------------------------
# 4. ICMP/Ping Settings
# -----------------------------------------------------------------------------
- name: NFTables | assert | Validate input ICMP/ping settings
  assert:
    that:
      - nftables_ping_input is defined
      - nftables_ping_input is mapping
      - nftables_ping_input.enabled is defined
      - nftables_ping_input.enabled is boolean
      - nftables_ping_input.rate_limit is defined
      - nftables_ping_input.rate_limit is string
      - nftables_ping_input.burst is defined
      - nftables_ping_input.burst is integer
      - nftables_ping_input.log is defined
      - nftables_ping_input.log is boolean
      - nftables_ping_input.comment is defined
      - nftables_ping_input.comment is string
    quiet: true
    fail_msg: "nftables_ping_input contains invalid values"

- name: NFTables | assert | Validate output ICMP/ping settings
  assert:
    that:
      - nftables_ping_output is defined
      - nftables_ping_output is mapping
      - nftables_ping_output.enabled is defined
      - nftables_ping_output.enabled is boolean
      - nftables_ping_output.rate_limit is defined
      - nftables_ping_output.rate_limit is string
      - nftables_ping_output.burst is defined
      - nftables_ping_output.burst is integer
      - nftables_ping_output.log is defined
      - nftables_ping_output.log is boolean
      - nftables_ping_output.comment is defined
      - nftables_ping_output.comment is string
    quiet: true
    fail_msg: "nftables_ping_output contains invalid values"

# -----------------------------------------------------------------------------
# 5. Basic Access Control Settings
# -----------------------------------------------------------------------------
- name: NFTables | assert | Validate blocked reserved IP ranges
  assert:
    that:
      - nftables_blocked_reserved_ranges is defined
      - nftables_blocked_reserved_ranges is sequence
    quiet: true
    fail_msg: "nftables_blocked_reserved_ranges must be a list of IP ranges"

# -----------------------------------------------------------------------------
# 6. Cluster Communication Settings
# -----------------------------------------------------------------------------
- name: NFTables | assert | Validate cluster mode configuration flag
  assert:
    that:
      - nftables_cluster_enabled is defined
      - nftables_cluster_enabled is boolean
    quiet: true
    fail_msg: "nftables_cluster_enabled must be a boolean (true/false)"

- name: NFTables | assert | Validate cluster nodes list
  assert:
    that:
      - nftables_cluster_nodes is defined
      - nftables_cluster_nodes is sequence
    quiet: true
    fail_msg: "nftables_cluster_nodes must be a list"

- name: NFTables | assert | Validate cluster communication rules
  assert:
    that:
      - nftables_cluster_rules is defined
      - nftables_cluster_rules is sequence
      - (nftables_cluster_rules | map(attribute='port') | list | reject('number') | list | length) == 0
    quiet: true
    fail_msg: "nftables_cluster_rules must be a list where each item has a valid port"

# -----------------------------------------------------------------------------
# 7. User-Defined Rules Settings
# -----------------------------------------------------------------------------
- name: NFTables | assert | Validate user-defined rules enabled flags
  assert:
    that:
      - nftables_user_defined_input_enabled is defined
      - nftables_user_defined_input_enabled is boolean
      - nftables_user_defined_forward_enabled is defined
      - nftables_user_defined_forward_enabled is boolean
      - nftables_user_defined_output_enabled is defined
      - nftables_user_defined_output_enabled is boolean
    quiet: true
    fail_msg: "User-defined rules enabled flags must be boolean values"

- name: NFTables | assert | Validate user-defined rules lists
  assert:
    that:
      - nftables_user_defined_input_rules is defined
      - nftables_user_defined_input_rules is sequence
      - nftables_user_defined_forward_rules is defined
      - nftables_user_defined_forward_rules is sequence
      - nftables_user_defined_output_rules is defined
      - nftables_user_defined_output_rules is sequence
      # Validate port field for all user-defined rules (input, forward, output)
      - >
        (
          (nftables_user_defined_input_rules | selectattr('port', 'defined') | map(attribute='port') | list) +
          (nftables_user_defined_forward_rules | selectattr('port', 'defined') | map(attribute='port') | list) +
          (nftables_user_defined_output_rules | selectattr('port', 'defined') | map(attribute='port') | list)
        ) | select() | map('regex_search', '^(\d{1,5}(-\d{1,5})?|\d{1,5}(,\d{1,5})*)$') | select('string') | list | length ==
        (
          (nftables_user_defined_input_rules | selectattr('port', 'defined') | map(attribute='port') | list) +
          (nftables_user_defined_forward_rules | selectattr('port', 'defined') | map(attribute='port') | list) +
          (nftables_user_defined_output_rules | selectattr('port', 'defined') | map(attribute='port') | list)
        ) | select() | list | length or true
      # Validate that source fields are either strings or lists
      - >
        (
          (nftables_user_defined_input_rules | selectattr('source', 'defined') | list) +
          (nftables_user_defined_forward_rules | selectattr('source', 'defined') | list) +
          (nftables_user_defined_output_rules | selectattr('source', 'defined') | list)
        ) | select() | map(attribute='source') | map('type_debug') | select('string') | map('regex_search', '^(str|list)$') | select('string') | list | length ==
        (
          (nftables_user_defined_input_rules | selectattr('source', 'defined') | list) +
          (nftables_user_defined_forward_rules | selectattr('source', 'defined') | list) +
          (nftables_user_defined_output_rules | selectattr('source', 'defined') | list)
        ) | select() | length or true
      # Validate that destination fields are either strings or lists
      - >
        (
          (nftables_user_defined_input_rules | selectattr('destination', 'defined') | list) +
          (nftables_user_defined_forward_rules | selectattr('destination', 'defined') | list) +
          (nftables_user_defined_output_rules | selectattr('destination', 'defined') | list)
        ) | select() | map(attribute='destination') | map('type_debug') | select('string') | map('regex_search', '^(str|list)$') | select('string') | list | length ==
        (
          (nftables_user_defined_input_rules | selectattr('destination', 'defined') | list) +
          (nftables_user_defined_forward_rules | selectattr('destination', 'defined') | list) +
          (nftables_user_defined_output_rules | selectattr('destination', 'defined') | list)
        ) | select() | length or true
      # Check that list items are strings (if any source is a list)
      - >
        (
          (nftables_user_defined_input_rules | selectattr('source', 'defined') | selectattr('source', 'sequence') | map(attribute='source') | list) +
          (nftables_user_defined_forward_rules | selectattr('source', 'defined') | selectattr('source', 'sequence') | map(attribute='source') | list) +
          (nftables_user_defined_output_rules | selectattr('source', 'defined') | selectattr('source', 'sequence') | map(attribute='source') | list)
        ) | select() | flatten | map('type_debug') | select('string') | map('regex_search', '^str$') | select('string') | list | length ==
        (
          (nftables_user_defined_input_rules | selectattr('source', 'defined') | selectattr('source', 'sequence') | map(attribute='source') | list) +
          (nftables_user_defined_forward_rules | selectattr('source', 'defined') | selectattr('source', 'sequence') | map(attribute='source') | list) +
          (nftables_user_defined_output_rules | selectattr('source', 'defined') | selectattr('source', 'sequence') | map(attribute='source') | list)
        ) | select() | flatten | select() | list | length or true
      # Check that list items are strings (if any destination is a list)
      - >
        (
          (nftables_user_defined_input_rules | selectattr('destination', 'defined') | selectattr('destination', 'sequence') | map(attribute='destination') | list) +
          (nftables_user_defined_forward_rules | selectattr('destination', 'defined') | selectattr('destination', 'sequence') | map(attribute='destination') | list) +
          (nftables_user_defined_output_rules | selectattr('destination', 'defined') | selectattr('destination', 'sequence') | map(attribute='destination') | list)
        ) | select() | flatten | map('type_debug') | select('string') | map('regex_search', '^str$') | select('string') | list | length ==
        (
          (nftables_user_defined_input_rules | selectattr('destination', 'defined') | selectattr('destination', 'sequence') | map(attribute='destination') | list) +
          (nftables_user_defined_forward_rules | selectattr('destination', 'defined') | selectattr('destination', 'sequence') | map(attribute='destination') | list) +
          (nftables_user_defined_output_rules | selectattr('destination', 'defined') | selectattr('destination', 'sequence') | map(attribute='destination') | list)
        ) | select() | flatten | select() | list | length or true
    quiet: true
    fail_msg: "User-defined rules validation failed: port must be a valid numeric format, source and destination must be either strings or lists of strings (all items in the list must be strings)"

- name: NFTables | assert | Validate user-defined rules counter field
  assert:
    that:
      - >
        (
          nftables_user_defined_input_rules + nftables_user_defined_forward_rules + nftables_user_defined_output_rules
        ) | selectattr('counter', 'defined') | map(attribute='counter') | list | map('type_debug') | map('regex_search', '^bool$') | min
    quiet: true
    fail_msg: "User-defined rules 'counter' field must be a boolean value"

# -----------------------------------------------------------------------------
# 8. NAT Rules Settings
# -----------------------------------------------------------------------------
- name: NFTables | assert | Validate NAT enabled flags
  assert:
    that:
      - nftables_nat_prerouting_enabled is defined
      - nftables_nat_prerouting_enabled is boolean
      - nftables_nat_postrouting_enabled is defined
      - nftables_nat_postrouting_enabled is boolean
    quiet: true
    fail_msg: "NAT enabled flags must be boolean values"

- name: NFTables | assert | Validate NAT rules lists
  assert:
    that:
      - nftables_nat_prerouting_rules is defined
      - nftables_nat_prerouting_rules is sequence
      - nftables_nat_postrouting_rules is defined
      - nftables_nat_postrouting_rules is sequence
      # Validate nat_action and port for all NAT rules
      - >
        (
          nftables_nat_prerouting_rules + nftables_nat_postrouting_rules
        ) | map('type_debug') | map('regex_search', '^dict$') | select('string') | list | length == (nftables_nat_prerouting_rules + nftables_nat_postrouting_rules) | list | length or true
      - >
        (
          nftables_nat_prerouting_rules + nftables_nat_postrouting_rules
        ) | selectattr('port', 'defined') | map(attribute='port') | select() | map('regex_search', '^([0-9]{1,5}(-[0-9]{1,5})?|[0-9]{1,5}(,[0-9]{1,5})*)$') | select('string') | list | length ==
        (
          nftables_nat_prerouting_rules + nftables_nat_postrouting_rules
        ) | selectattr('port', 'defined') | select() | list | length or true
      - >
        (
          nftables_nat_prerouting_rules + nftables_nat_postrouting_rules
        ) | selectattr('nat_action', 'defined') | map(attribute='nat_action') | select() | list | difference(['dnat', 'snat', 'masquerade']) | length == 0
      - >
        (
          nftables_nat_prerouting_rules + nftables_nat_postrouting_rules
        ) | selectattr('counter', 'defined') | map(attribute='counter') | select() | map('type_debug') | select('string') | map('regex_search', '^bool$') | select('string') | list | length ==
        (
          nftables_nat_prerouting_rules + nftables_nat_postrouting_rules
        ) | selectattr('counter', 'defined') | select() | list | length or true
      # Validate that source fields are either strings or lists
      - >
        (
          (nftables_nat_prerouting_rules | selectattr('source', 'defined') | list) +
          (nftables_nat_postrouting_rules | selectattr('source', 'defined') | list)
        ) | select() | map(attribute='source') | map('type_debug') | select('string') | map('regex_search', '^(str|list)$') | select('string') | list | length ==
        (
          (nftables_nat_prerouting_rules | selectattr('source', 'defined') | list) +
          (nftables_nat_postrouting_rules | selectattr('source', 'defined') | list)
        ) | select() | length or true
      # Validate that destination fields are either strings or lists
      - >
        (
          (nftables_nat_prerouting_rules | selectattr('destination', 'defined') | list) +
          (nftables_nat_postrouting_rules | selectattr('destination', 'defined') | list)
        ) | select() | map(attribute='destination') | map('type_debug') | select('string') | map('regex_search', '^(str|list)$') | select('string') | list | length ==
        (
          (nftables_nat_prerouting_rules | selectattr('destination', 'defined') | list) +
          (nftables_nat_postrouting_rules | selectattr('destination', 'defined') | list)
        ) | select() | length or true
      # Check that list items are strings (if any source is a list)
      - >
        (
          (nftables_nat_prerouting_rules | selectattr('source', 'defined') | selectattr('source', 'sequence') | map(attribute='source') | list) +
          (nftables_nat_postrouting_rules | selectattr('source', 'defined') | selectattr('source', 'sequence') | map(attribute='source') | list)
        ) | select() | flatten | map('type_debug') | select('string') | map('regex_search', '^str$') | select('string') | list | length ==
        (
          (nftables_nat_prerouting_rules | selectattr('source', 'defined') | selectattr('source', 'sequence') | map(attribute='source') | list) +
          (nftables_nat_postrouting_rules | selectattr('source', 'defined') | selectattr('source', 'sequence') | map(attribute='source') | list)
        ) | select() | flatten | select() | list | length or true
      # Check that list items are strings (if any destination is a list)
      - >
        (
          (nftables_nat_prerouting_rules | selectattr('destination', 'defined') | selectattr('destination', 'sequence') | map(attribute='destination') | list) +
          (nftables_nat_postrouting_rules | selectattr('destination', 'defined') | selectattr('destination', 'sequence') | map(attribute='destination') | list)
        ) | select() | flatten | map('type_debug') | select('string') | map('regex_search', '^str$') | select('string') | list | length ==
        (
          (nftables_nat_prerouting_rules | selectattr('destination', 'defined') | selectattr('destination', 'sequence') | map(attribute='destination') | list) +
          (nftables_nat_postrouting_rules | selectattr('destination', 'defined') | selectattr('destination', 'sequence') | map(attribute='destination') | list)
        ) | select() | flatten | select() | list | length or true
    quiet: true
    fail_msg: >-
      NAT rules validation failed: Each rule must be a dict.
      Ports must be valid numeric format.
      nat_action must be one of: dnat, snat, masquerade.
      Source and destination must be either strings or lists of strings (all items in the list must be strings).
